name: Release to prod

on:
  push:
    branches:
      - 'releases/**'

jobs:
  tagging:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: get next release version
        id: version
        run: |
          next=$(./scripts/compare-with-latest.sh ${GITHUB_REF_NAME##releases/}) 
          echo "next version: $next"
          echo "next=$next" >> $GITHUB_ENV

      - name: add tag
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const ref = `refs/tags/${process.env.next}`;
            const sha = context.sha;
            await github.rest.git.createRef({ owner, repo, ref, sha });
  
  merging:
    runs-on: ubuntu-latest
    needs: tagging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup git user
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git fetch origin

      - run: echo $next

      - name: Merge into main
        run: |
          git checkout main
          git merge --no-ff "$next" --commit --no-edit
          git push origin main

      - name: Merge into other releases
        run: |
          for branch in $(git branch -r | grep 'origin/releases/'); do
            git checkout ${branch#origin/}
            git merge --no-ff "$next" --commit --no-edit
            git push origin ${branch#origin/}
          done

  cleanup:
    needs: tagging
    runs-on: ubuntu-latest
    steps:
      - name: Delete old release branches
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const currentVersion = process.env.GITHUB_REF_NAME.slice("releases/".length).split('.').map(Number);
            const versionBranchPrefix = "releases/";

            const branches = await github.rest.repos.listBranches({
              owner,
              repo,
            });

            const releaseBranches = branches.data
              .filter(branch => branch.name.startsWith(versionBranchPrefix))
              .map(branch => ({ name: branch.name, version: branch.name.slice(versionBranchPrefix.length).split('.').map(Number)}));

            for (let {name, version: branchVersion} of releaseBranches) {
              if (branchVersion.some((val, i) => val < currentVersion[i])) {
                await github.rest.git.deleteRef({
                  owner,
                  repo,
                  ref: "heads/" + name,
                });
                console.log(`Deleted branch ${name}`);
              }
            }
