name: Create new release

on:
  push:
    branches:
      - main

jobs:
  new-release-for-qa:
    runs-on: ubuntu-latest
    environment: qa
    outputs:
      version: ${{ steps.calver.outputs.version }}
    steps:
      - name: Test available
        uses: actions/github-script@v6
        with:
          script: |
            const repo = context.repo;
            const branches = await github.rest.repos.listBranches(repo);
            
            branches.data
              .filter(branch => branch.name.startsWith('releases/'))
              .some(async (branch) => {
                const comparison = await github.rest.repos.compareCommits({
                  ...repo,
                  base: branch.name,
                  head: process.env.GITHUB_SHA
                });
      
                if (["identical", "behind"].includes(comparison.data.status)) {
                  console.log(`Problem with branch: ${branch.name}`);
                  throw new Error("Newer releases branch detected!");
                }
              });

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Calculate new version
        id: calver
        run: |
          version=$(./scripts/get-new-version.sh)
          echo "new version: $version"
          echo "version=$version" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create and push release branch
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git switch -c releases/${{ env.version }}
          git push origin releases/${{ env.version }}
  
  release-to-prod:
    runs-on: ubuntu-latest
    needs: new-release-for-qa
    env:
      version: ${{ needs.new-release-for-qa.outputs.version }}
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: releases/${{ env.version }}

      - name: Push tag
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag ${{ env.version }}
          git push origin ${{ env.version }}

  merging:
    runs-on: ubuntu-latest
    needs: [new-release-for-qa, release-to-prod]
    env:
      tag: ${{ needs.new-release-for-qa.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Merge into main
        run: |
          git fetch origin tag ${{ env.tag }} --no-tags
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git merge ${{ env.tag }} --no-ff --commit --no-edit
          git push origin main

  cleanup:
    runs-on: ubuntu-latest
    needs: merging
    steps:
      - name: Delete old release branches
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const currentVersion = process.env.GITHUB_HEAD_REF.slice("releases/".length).split('.').map(Number);
            const versionBranchPrefix = "releases/";

            const branches = await github.rest.repos.listBranches({
              owner,
              repo,
            });

            const releaseBranches = branches.data
              .filter(branch => branch.name.startsWith(versionBranchPrefix))
              .map(branch => ({ name: branch.name, version: branch.name.slice(versionBranchPrefix.length).split('.').map(Number)}));

            for (let {name, version: branchVersion} of releaseBranches) {
              if (branchVersion.some((val, i) => val < currentVersion[i])) {
                await github.rest.git.deleteRef({
                  owner,
                  repo,
                  ref: "heads/" + name,
                });
                console.log(`Deleted branch ${name}`);
              }
            }
